package symbol

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *ExchangeType) DecodeMsg(dc *msgp.Reader) (err error) {
	{
		var zb0001 int
		zb0001, err = dc.ReadInt()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = ExchangeType(zb0001)
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z ExchangeType) EncodeMsg(en *msgp.Writer) (err error) {
	err = en.WriteInt(int(z))
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z ExchangeType) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendInt(o, int(z))
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *ExchangeType) UnmarshalMsg(bts []byte) (o []byte, err error) {
	{
		var zb0001 int
		zb0001, bts, err = msgp.ReadIntBytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = ExchangeType(zb0001)
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z ExchangeType) Msgsize() (s int) {
	s = msgp.IntSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *Symbol) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 3 {
		err = msgp.ArrayError{Wanted: 3, Got: zb0001}
		return
	}
	z.SymbolName, err = dc.ReadString()
	if err != nil {
		err = msgp.WrapError(err, "SymbolName")
		return
	}
	{
		var zb0002 int
		zb0002, err = dc.ReadInt()
		if err != nil {
			err = msgp.WrapError(err, "Exchange")
			return
		}
		z.Exchange = ExchangeType(zb0002)
	}
	err = z.Period.DecodeMsg(dc)
	if err != nil {
		err = msgp.WrapError(err, "Period")
		return
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Symbol) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 3
	err = en.Append(0x93)
	if err != nil {
		return
	}
	err = en.WriteString(z.SymbolName)
	if err != nil {
		err = msgp.WrapError(err, "SymbolName")
		return
	}
	err = en.WriteInt(int(z.Exchange))
	if err != nil {
		err = msgp.WrapError(err, "Exchange")
		return
	}
	err = z.Period.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Period")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Symbol) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 3
	o = append(o, 0x93)
	o = msgp.AppendString(o, z.SymbolName)
	o = msgp.AppendInt(o, int(z.Exchange))
	o, err = z.Period.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Period")
		return
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Symbol) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 3 {
		err = msgp.ArrayError{Wanted: 3, Got: zb0001}
		return
	}
	z.SymbolName, bts, err = msgp.ReadStringBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "SymbolName")
		return
	}
	{
		var zb0002 int
		zb0002, bts, err = msgp.ReadIntBytes(bts)
		if err != nil {
			err = msgp.WrapError(err, "Exchange")
			return
		}
		z.Exchange = ExchangeType(zb0002)
	}
	bts, err = z.Period.UnmarshalMsg(bts)
	if err != nil {
		err = msgp.WrapError(err, "Period")
		return
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Symbol) Msgsize() (s int) {
	s = 1 + msgp.StringPrefixSize + len(z.SymbolName) + msgp.IntSize + z.Period.Msgsize()
	return
}
