package common

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"time"

	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *Candle) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 9 {
		err = msgp.ArrayError{Wanted: 9, Got: zb0001}
		return
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "Date")
			return
		}
		z.Date = nil
	} else {
		if z.Date == nil {
			z.Date = new(time.Time)
		}
		*z.Date, err = dc.ReadTime()
		if err != nil {
			err = msgp.WrapError(err, "Date")
			return
		}
	}
	z.Open, err = dc.ReadFloat64()
	if err != nil {
		err = msgp.WrapError(err, "Open")
		return
	}
	z.High, err = dc.ReadFloat64()
	if err != nil {
		err = msgp.WrapError(err, "High")
		return
	}
	z.Low, err = dc.ReadFloat64()
	if err != nil {
		err = msgp.WrapError(err, "Low")
		return
	}
	z.Close, err = dc.ReadFloat64()
	if err != nil {
		err = msgp.WrapError(err, "Close")
		return
	}
	z.Volume, err = dc.ReadFloat64()
	if err != nil {
		err = msgp.WrapError(err, "Volume")
		return
	}
	z.QuoteAssetVolume, err = dc.ReadFloat64()
	if err != nil {
		err = msgp.WrapError(err, "QuoteAssetVolume")
		return
	}
	z.TakerBaseVolume, err = dc.ReadFloat64()
	if err != nil {
		err = msgp.WrapError(err, "TakerBaseVolume")
		return
	}
	z.TakerQuoteVolume, err = dc.ReadFloat64()
	if err != nil {
		err = msgp.WrapError(err, "TakerQuoteVolume")
		return
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Candle) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 6
	err = en.Append(0x99)
	if err != nil {
		return
	}
	if z.Date == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteTime(*z.Date)
		if err != nil {
			err = msgp.WrapError(err, "Date")
			return
		}
	}
	err = en.WriteFloat64(z.Open)
	if err != nil {
		err = msgp.WrapError(err, "Open")
		return
	}
	err = en.WriteFloat64(z.High)
	if err != nil {
		err = msgp.WrapError(err, "High")
		return
	}
	err = en.WriteFloat64(z.Low)
	if err != nil {
		err = msgp.WrapError(err, "Low")
		return
	}
	err = en.WriteFloat64(z.Close)
	if err != nil {
		err = msgp.WrapError(err, "Close")
		return
	}
	err = en.WriteFloat64(z.Volume)
	if err != nil {
		err = msgp.WrapError(err, "Volume")
		return
	}
	err = en.WriteFloat64(z.QuoteAssetVolume)
	if err != nil {
		err = msgp.WrapError(err, "QuoteAssetVolume")
		return
	}
	err = en.WriteFloat64(z.TakerBaseVolume)
	if err != nil {
		err = msgp.WrapError(err, "TakerBaseVolume")
		return
	}
	err = en.WriteFloat64(z.TakerQuoteVolume)
	if err != nil {
		err = msgp.WrapError(err, "TakerQuoteVolume")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Candle) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 9
	o = append(o, 0x99)
	if z.Date == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendTime(o, *z.Date)
	}
	o = msgp.AppendFloat64(o, z.Open)
	o = msgp.AppendFloat64(o, z.High)
	o = msgp.AppendFloat64(o, z.Low)
	o = msgp.AppendFloat64(o, z.Close)
	o = msgp.AppendFloat64(o, z.Volume)
	o = msgp.AppendFloat64(o, z.QuoteAssetVolume)
	o = msgp.AppendFloat64(o, z.TakerBaseVolume)
	o = msgp.AppendFloat64(o, z.TakerQuoteVolume)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Candle) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 9 {
		err = msgp.ArrayError{Wanted: 9, Got: zb0001}
		return
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.Date = nil
	} else {
		if z.Date == nil {
			z.Date = new(time.Time)
		}
		*z.Date, bts, err = msgp.ReadTimeBytes(bts)
		if err != nil {
			err = msgp.WrapError(err, "Date")
			return
		}
	}
	z.Open, bts, err = msgp.ReadFloat64Bytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "Open")
		return
	}
	z.High, bts, err = msgp.ReadFloat64Bytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "High")
		return
	}
	z.Low, bts, err = msgp.ReadFloat64Bytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "Low")
		return
	}
	z.Close, bts, err = msgp.ReadFloat64Bytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "Close")
		return
	}
	z.Volume, bts, err = msgp.ReadFloat64Bytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "Volume")
		return
	}
	z.QuoteAssetVolume, bts, err = msgp.ReadFloat64Bytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "QuoteAssetVolume")
		return
	}
	z.TakerBaseVolume, bts, err = msgp.ReadFloat64Bytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "TakerBaseVolume")
		return
	}
	z.TakerQuoteVolume, bts, err = msgp.ReadFloat64Bytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "TakerQuoteVolume")
		return
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Candle) Msgsize() (s int) {
	s = 1
	if z.Date == nil {
		s += msgp.NilSize
	} else {
		s += msgp.TimeSize
	}
	s += msgp.Float64Size + msgp.Float64Size + msgp.Float64Size + msgp.Float64Size + msgp.Float64Size
	return
}
